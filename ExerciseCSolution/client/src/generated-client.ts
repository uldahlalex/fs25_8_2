//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';
import {BaseDto} from "ws-request-hook";


export interface ClientWantsToGoToQuestionPhaseDto extends BaseDto {
    gameId?: string;
}

export interface ServerSendsQuestionDto extends BaseDto {
    question?: Question;
}

export interface Question {
    id?: string;
    gameId?: string | undefined;
    questionText?: string;
    questionIndex?: number;
    game?: Game | undefined;
    playerAnswers?: PlayerAnswer[];
    questionOptions?: QuestionOption[];
}

export interface Game {
    id?: string;
    name?: string;
    currentQuestionIndex?: number | undefined;
    players?: Player[];
    questions?: Question[];
}

export interface Player {
    id?: string;
    gameId?: string | undefined;
    nickname?: string;
    game?: Game | undefined;
    playerAnswers?: PlayerAnswer[];
}

export interface PlayerAnswer {
    playerId?: string;
    questionId?: string;
    selectedOptionId?: string | undefined;
    answerTimestamp?: Date | undefined;
    player?: Player;
    question?: Question;
    selectedOption?: QuestionOption | undefined;
}

export interface QuestionOption {
    id?: string;
    questionId?: string | undefined;
    optionText?: string;
    isCorrect?: boolean;
    playerAnswers?: PlayerAnswer[];
    question?: Question | undefined;
}

export interface ServerEndsGameRoundDto extends BaseDto {
    gameStateDto?: GameStateDTO;
}

export interface GameStateDTO {
    gameId?: string;
    gameName?: string;
    currentQuestionIndex?: number;
    players?: PlayerDTO[];
    questions?: QuestionDTO[];
}

export interface PlayerDTO {
    playerId?: string;
    nickname?: string;
}

export interface QuestionDTO {
    questionId?: string;
    questionText?: string;
    questionIndex?: number;
    options?: QuestionOptionDTO[];
    playerAnswers?: PlayerAnswerDTO[];
}

export interface QuestionOptionDTO {
    optionId?: string;
    optionText?: string;
    isCorrect?: boolean;
}

export interface PlayerAnswerDTO {
    playerId?: string;
    playerNickname?: string;
    selectedOptionId?: string;
    isCorrect?: boolean;
    answerTimestamp?: Date | undefined;
}

export interface ClientWantsToJoinGameDto extends BaseDto {
    gameId?: string;
}

export interface ClientWantsToStartAGameDto extends BaseDto {
}

export interface ServerAddsClientToGameDto extends BaseDto {
    gameId?: string;
}

export interface ClientAnswersQuestionDto extends BaseDto {
    optionId?: string;
    questionId?: string;
    gameId?: string;
}

export interface ClientWantsToAuthenticateDto extends BaseDto {
    username?: string;
}

export interface ClientWantsToSubscribeToTopicDto extends BaseDto {
    topicId?: string;
}

export interface ClientWantsToUnsubscribeFromTopicDto extends BaseDto {
    topicId?: string;
}

export interface ServerAuthenticatesClientDto extends BaseDto {
    topics?: string[];
}

export interface ServerConfirmsDto extends BaseDto {
    success?: boolean;
}

export interface ServerSendsErrorMessageDto extends BaseDto {
    error?: string;
}

/** Available eventType constants */
export enum StringConstants {
    ClientWantsToGoToQuestionPhaseDto = "ClientWantsToGoToQuestionPhaseDto",
    ServerSendsQuestionDto = "ServerSendsQuestionDto",
    ServerEndsGameRoundDto = "ServerEndsGameRoundDto",
    ClientWantsToJoinGameDto = "ClientWantsToJoinGameDto",
    ClientWantsToStartAGameDto = "ClientWantsToStartAGameDto",
    ServerAddsClientToGameDto = "ServerAddsClientToGameDto",
    ClientAnswersQuestionDto = "ClientAnswersQuestionDto",
    ClientWantsToAuthenticateDto = "ClientWantsToAuthenticateDto",
    ClientWantsToSubscribeToTopicDto = "ClientWantsToSubscribeToTopicDto",
    ClientWantsToUnsubscribeFromTopicDto = "ClientWantsToUnsubscribeFromTopicDto",
    ServerAuthenticatesClientDto = "ServerAuthenticatesClientDto",
    ServerConfirmsDto = "ServerConfirmsDto",
    ServerSendsErrorMessageDto = "ServerSendsErrorMessageDto",
}

