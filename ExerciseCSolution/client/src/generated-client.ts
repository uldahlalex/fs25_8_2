//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';


export interface BaseDto {
    eventType?: string;
    requestId?: string;
}

export interface ClientWantsToGoToQuestionPhaseDto extends BaseDto {
    gameId?: string;
}

export interface ServerSendsQuestionDto extends BaseDto {
    question?: Question;
}

export interface Question {
    id?: string;
    gametemplateid?: string | undefined;
    questiontext?: string;
    gamerounds?: Gameround[];
    gametemplate?: Gametemplate | undefined;
    playeranswers?: Playeranswer[];
    questionoptions?: Questionoption[];
}

export interface Gameround {
    gameid?: string | undefined;
    roundquestionid?: string | undefined;
    id?: string;
    game?: Game | undefined;
    roundquestion?: Question | undefined;
}

export interface Game {
    id?: string;
    templateid?: string | undefined;
    gamerounds?: Gameround[];
    playeranswers?: Playeranswer[];
    template?: Gametemplate | undefined;
    players?: Player[];
}

export interface Playeranswer {
    playerid?: string;
    questionid?: string;
    gameid?: string | undefined;
    optionid?: string | undefined;
    answertimestamp?: Date | undefined;
    game?: Game | undefined;
    option?: Questionoption | undefined;
    player?: Player;
    question?: Question;
}

export interface Questionoption {
    id?: string;
    questionid?: string | undefined;
    optiontext?: string;
    iscorrect?: boolean;
    playeranswers?: Playeranswer[];
    question?: Question | undefined;
}

export interface Player {
    nickname?: string;
    id?: string;
    playeranswers?: Playeranswer[];
    games?: Game[];
}

export interface Gametemplate {
    id?: string;
    name?: string;
    games?: Game[];
    questions?: Question[];
}

export interface ServerEndsGameRoundDto extends BaseDto {
    gameState?: PlayerWithAnswersForGame[];
}

export interface PlayerWithAnswersForGame {
    player?: Player;
    answers?: Playeranswer[];
    gameId?: string;
}

export interface ClientWantsToJoinGameDto extends BaseDto {
    gameId?: string;
}

export interface ClientWantsToStartAGameDto extends BaseDto {
}

export interface ServerAddsClientToGame extends BaseDto {
    gameId?: string;
}

export interface ClientAnswersQuestionDto extends BaseDto {
    optionId?: string;
    questionId?: string;
}

export interface ClientWantsToAuthenticateDto extends BaseDto {
    username?: string;
}

export interface ClientWantsToSubscribeToTopicDto extends BaseDto {
    topicId?: string;
}

export interface ClientWantsToUnsubscribeFromTopicDto extends BaseDto {
    topicId?: string;
}

export interface ServerAuthenticatesClientDto extends BaseDto {
    topics?: string[];
}

export interface ServerConfirmsDto extends BaseDto {
    success?: boolean;
}

export interface ServerSendsErrorMessageDto extends BaseDto {
    error?: string;
}

/** Available eventType constants */
export enum StringConstants {
    ClientWantsToGoToQuestionPhaseDto = "ClientWantsToGoToQuestionPhaseDto",
    ServerSendsQuestionDto = "ServerSendsQuestionDto",
    ServerEndsGameRoundDto = "ServerEndsGameRoundDto",
    ClientWantsToJoinGameDto = "ClientWantsToJoinGameDto",
    ClientWantsToStartAGameDto = "ClientWantsToStartAGameDto",
    ServerAddsClientToGame = "ServerAddsClientToGame",
    ClientAnswersQuestionDto = "ClientAnswersQuestionDto",
    ClientWantsToAuthenticateDto = "ClientWantsToAuthenticateDto",
    ClientWantsToSubscribeToTopicDto = "ClientWantsToSubscribeToTopicDto",
    ClientWantsToUnsubscribeFromTopicDto = "ClientWantsToUnsubscribeFromTopicDto",
    ServerAuthenticatesClientDto = "ServerAuthenticatesClientDto",
    ServerConfirmsDto = "ServerConfirmsDto",
    ServerSendsErrorMessageDto = "ServerSendsErrorMessageDto",
}

